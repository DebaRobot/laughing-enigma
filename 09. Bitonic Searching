
#include <bits/stdc++.h>
using namespace std;

int findPeak(int arr[], int n)
{
	int l = 0;
	int r = n-1;
	int mid ;
	while (l <= r) {

		mid = (l + r) >> 1;
		if ((mid == 0 || arr[mid - 1] <= arr[mid])
			and (mid == n - 1 || arr[mid + 1] <= arr[mid]))
			break;
		if (mid > 0 and arr[mid - 1] > arr[mid])
			r = mid - 1;
		else
			l = mid + 1;
	}
	return mid;
}
int main()
{
	int arr[] = { 1, 3, 20, 4, 1, 0 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int result = findPeak(arr, n);
	cout << "Index of a peak point is " << arr[result];
	return 0;
}
-----------------------------------------------------------------------

#include <bits/stdc++.h>
using namespace std;

int DecreasingBinarySearch(vector<int> v,int start, int e , int key, int size){
    while(start <= e){
        int mid =  start + (e - start)/2;
        if(v[mid] == key){
            return mid;
        }
        else if(v[mid] > key){
            start = mid + 1;
        }
        else{
            e =  mid - 1;
        }

    }
    return -1;
}

int BinarySearch(vector<int> v,int start, int e , int key, int size){

    while(start <= e){
        int mid =  start + (e - start)/2;
        if(v[mid] == key){
            return mid;
        }
        else if(v[mid] > key){
            e =  mid - 1;
        }
        else{
            start = mid + 1;
        }

    }
    return -1;
}

int findPeak(vector<int> arr, int n)
{
	int l = 0;
	int r = n-1;
	int mid ;
	while (l <= r) {

		mid = (l + r) >> 1;
		if ((mid == 0 || arr[mid - 1] <= arr[mid])
			and (mid == n - 1 || arr[mid + 1] <= arr[mid]))
			break;
		if (mid > 0 and arr[mid - 1] > arr[mid])
			r = mid - 1;
		else
			l = mid + 1;
	}
	return mid;
}
int main()
{
	vector<int> arr = { 1, 3, 20, 4, 1, 0 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int index = findPeak(arr, n);
	int key = 3;

	int be = BinarySearch(arr, 0 , index - 1 , key , arr.size());
	int ce = DecreasingBinarySearch(arr ,index, n , key, arr.size());
    int me = max(be, ce);
	cout << "Index of a Elements is " << me;
	return 0;
}

